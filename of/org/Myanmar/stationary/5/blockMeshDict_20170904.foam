/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(87);
        points[0] = point(-1.500000, -1.500000, -0.500000);
        points[1] = point(-0.302500, -1.500000, -0.500000);
        points[2] = point(-0.151250, -1.500000, -0.500000);
        points[3] = point(-0.120045, -1.500000, -0.500000);
        points[4] = point(-0.108125, -1.500000, -0.500000);
        points[5] = point(-0.089375, -1.500000, -0.500000);
        points[6] = point(-0.077391, -1.500000, -0.500000);
        points[7] = point(0.000000, -1.500000, -0.500000);
        points[8] = point(0.077391, -1.500000, -0.500000);
        points[9] = point(0.089375, -1.500000, -0.500000);
        points[10] = point(0.108125, -1.500000, -0.500000);
        points[11] = point(0.120045, -1.500000, -0.500000);
        points[12] = point(0.151250, -1.500000, -0.500000);
        points[13] = point(0.302500, -1.500000, -0.500000);
        points[14] = point(4.500000, -1.500000, -0.500000);
        points[15] = point(-1.500000, -0.062500, -0.500000);
        points[16] = point(-0.302500, -0.062500, -0.500000);
        points[17] = point(-0.151250, -0.062500, -0.500000);
        points[18] = point(-0.120045, -0.062500, -0.500000);
        points[19] = point(-0.108125, -0.062500, -0.500000);
        points[20] = point(-0.089375, -0.062500, -0.500000);
        points[21] = point(-0.077391, -0.062500, -0.500000);
        points[22] = point(0.000000, -0.062500, -0.500000);
        points[23] = point(0.077391, -0.062500, -0.500000);
        points[24] = point(0.089375, -0.062500, -0.500000);
        points[25] = point(0.108125, -0.062500, -0.500000);
        points[26] = point(0.120045, -0.062500, -0.500000);
        points[27] = point(0.151250, -0.062500, -0.500000);
        points[28] = point(0.302500, -0.062500, -0.500000);
        points[29] = point(4.500000, -0.062500, -0.500000);
        points[30] = point(-1.500000, -0.012500, -0.500000);
        points[31] = point(-0.302500, -0.012500, -0.500000);
        points[32] = point(-0.151250, -0.012500, -0.500000);
        points[33] = point(-0.120045, -0.012500, -0.500000);
        points[34] = point(-0.108125, -0.012500, -0.500000);
        points[35] = point(-0.089375, -0.012500, -0.500000);
        points[36] = point(-0.077391, -0.012500, -0.500000);
        points[37] = point(0.000000, -0.012500, -0.500000);
        points[38] = point(0.077391, -0.012500, -0.500000);
        points[39] = point(0.089375, -0.012500, -0.500000);
        points[40] = point(0.108125, -0.012500, -0.500000);
        points[41] = point(0.120045, -0.012500, -0.500000);
        points[42] = point(0.151250, -0.012500, -0.500000);
        points[43] = point(0.302500, -0.012500, -0.500000);
        points[44] = point(4.500000, -0.012500, -0.500000);
        points[45] = point(-1.500000, 0.006350, -0.500000);
        points[46] = point(-0.302500, 0.006350, -0.500000);
        points[47] = point(-0.151250, 0.006350, -0.500000);
        points[48] = point(-0.120045, 0.006974, -0.500000);
        points[49] = point(-0.110664, 0.005273, -0.500000);
        points[50] = point(-0.086766, 0.005765, -0.500000);
        points[51] = point(-0.077391, 0.007827, -0.500000);
        points[52] = point(0.000000, 0.009375, -0.500000);
        points[53] = point(0.077391, 0.007827, -0.500000);
        points[54] = point(0.086766, 0.005765, -0.500000);
        points[55] = point(0.110668, 0.005287, -0.500000);
        points[56] = point(0.120045, 0.006974, -0.500000);
        points[57] = point(0.151250, 0.006350, -0.500000);
        points[58] = point(0.302500, 0.006350, -0.500000);
        points[59] = point(4.500000, 0.006350, -0.500000);
        points[60] = point(-1.500000, 0.009525, -0.500000);
        points[61] = point(-0.302500, 0.009525, -0.500000);
        points[62] = point(-0.151250, 0.009525, -0.500000);
        points[63] = point(-0.148750, 0.009525, -0.500000);
        points[64] = point(0.000000, 0.012500, -0.500000);
        points[65] = point(0.148750, 0.009525, -0.500000);
        points[66] = point(0.151250, 0.009525, -0.500000);
        points[67] = point(0.302500, 0.009525, -0.500000);
        points[68] = point(4.500000, 0.009525, -0.500000);
        points[69] = point(-1.500000, 0.062500, -0.500000);
        points[70] = point(-0.302500, 0.062500, -0.500000);
        points[71] = point(-0.151250, 0.062500, -0.500000);
        points[72] = point(-0.148750, 0.062500, -0.500000);
        points[73] = point(0.000000, 0.062500, -0.500000);
        points[74] = point(0.148750, 0.062500, -0.500000);
        points[75] = point(0.151250, 0.062500, -0.500000);
        points[76] = point(0.302500, 0.062500, -0.500000);
        points[77] = point(4.500000, 0.062500, -0.500000);
        points[78] = point(-1.500000, 1.500000, -0.500000);
        points[79] = point(-0.302500, 1.500000, -0.500000);
        points[80] = point(-0.151250, 1.500000, -0.500000);
        points[81] = point(-0.148750, 1.500000, -0.500000);
        points[82] = point(0.000000, 1.500000, -0.500000);
        points[83] = point(0.148750, 1.500000, -0.500000);
        points[84] = point(0.151250, 1.500000, -0.500000);
        points[85] = point(0.302500, 1.500000, -0.500000);
        points[86] = point(4.500000, 1.500000, -0.500000);

        // Duplicate z points
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+sz] = point(pt.x(), pt.y(), -pt.z());
        }

        os << points;
    #};
};

blocks
(
    hex (000 001 016 015 087 088 103 102) (055 057 1) simpleGrading (  0.006   0.005 1)
    hex (001 002 017 016 088 089 104 103) (241 057 1) simpleGrading (  1.000   0.005 1)
    hex (002 003 018 017 089 090 105 104) (049 057 1) simpleGrading (  1.000   0.005 1)
    hex (003 004 019 018 090 091 106 105) (019 057 1) simpleGrading (  1.000   0.005 1)
    hex (004 005 020 019 091 092 107 106) (029 057 1) simpleGrading (  1.000   0.005 1)
    hex (005 006 021 020 092 093 108 107) (019 057 1) simpleGrading (  1.000   0.005 1)
    hex (006 007 022 021 093 094 109 108) (123 057 1) simpleGrading (  1.000   0.005 1)
    hex (007 008 023 022 094 095 110 109) (123 057 1) simpleGrading (  1.000   0.005 1)
    hex (008 009 024 023 095 096 111 110) (019 057 1) simpleGrading (  1.000   0.005 1)
    hex (009 010 025 024 096 097 112 111) (029 057 1) simpleGrading (  1.000   0.005 1)
    hex (010 011 026 025 097 098 113 112) (019 057 1) simpleGrading (  1.000   0.005 1)
    hex (011 012 027 026 098 099 114 113) (049 057 1) simpleGrading (  1.000   0.005 1)
    hex (012 013 028 027 099 100 115 114) (241 057 1) simpleGrading (  1.000   0.005 1)
    hex (013 014 029 028 100 101 116 115) (068 057 1) simpleGrading (611.455   0.005 1)
    hex (015 016 031 030 102 103 118 117) (055 079 1) simpleGrading (  0.006   1.000 1)
    hex (016 017 032 031 103 104 119 118) (241 079 1) simpleGrading (1 1 1)
    hex (017 018 033 032 104 105 120 119) (049 079 1) simpleGrading (1 1 1)
    hex (018 019 034 033 105 106 121 120) (019 079 1) simpleGrading (1 1 1)
    hex (019 020 035 034 106 107 122 121) (029 079 1) simpleGrading (1 1 1)
    hex (020 021 036 035 107 108 123 122) (019 079 1) simpleGrading (1 1 1)
    hex (021 022 037 036 108 109 124 123) (123 079 1) simpleGrading (1 1 1)
    hex (022 023 038 037 109 110 125 124) (123 079 1) simpleGrading (1 1 1)
    hex (023 024 039 038 110 111 126 125) (019 079 1) simpleGrading (1 1 1)
    hex (024 025 040 039 111 112 127 126) (029 079 1) simpleGrading (1 1 1)
    hex (025 026 041 040 112 113 128 127) (019 079 1) simpleGrading (1 1 1)
    hex (026 027 042 041 113 114 129 128) (049 079 1) simpleGrading (1 1 1)
    hex (027 028 043 042 114 115 130 129) (241 079 1) simpleGrading (1 1 1)
    hex (028 029 044 043 115 116 131 130) (068 079 1) simpleGrading (611.455   1.000 1)
    hex (030 031 046 045 117 118 133 132) (055 030 1) simpleGrading (  0.006   1.000 1)
    hex (031 032 047 046 118 119 134 133) (241 030 1) simpleGrading (1 1 1)
    hex (032 033 048 047 119 120 135 134) (049 030 1) simpleGrading (1 1 1)
    hex (033 034 049 048 120 121 136 135) (019 030 1) simpleGrading (1 1 1)
    hex (035 036 051 050 122 123 138 137) (019 030 1) simpleGrading (1 1 1)
    hex (036 037 052 051 123 124 139 138) (123 030 1) simpleGrading (1 1 1)
    hex (037 038 053 052 124 125 140 139) (123 030 1) simpleGrading (1 1 1)
    hex (038 039 054 053 125 126 141 140) (019 030 1) simpleGrading (1 1 1)
    hex (040 041 056 055 127 128 143 142) (019 030 1) simpleGrading (1 1 1)
    hex (041 042 057 056 128 129 144 143) (049 030 1) simpleGrading (1 1 1)
    hex (042 043 058 057 129 130 145 144) (241 030 1) simpleGrading (1 1 1)
    hex (043 044 059 058 130 131 146 145) (068 030 1) simpleGrading (611.455   1.000 1)
    hex (045 046 061 060 132 133 148 147) (055 005 1) simpleGrading (  0.006   1.000 1)
    hex (046 047 062 061 133 134 149 148) (241 005 1) simpleGrading (1 1 1)
    hex (057 058 067 066 144 145 154 153) (241 005 1) simpleGrading (1 1 1)
    hex (058 059 068 067 145 146 155 154) (068 005 1) simpleGrading (611.455   1.000 1)
    hex (060 061 070 069 147 148 157 156) (055 084 1) simpleGrading (  0.006   1.000 1)
    hex (061 062 071 070 148 149 158 157) (241 084 1) simpleGrading (1 1 1)
    hex (062 063 072 071 149 150 159 158) (004 084 1) simpleGrading (1 1 1)
    hex (063 064 073 072 150 151 160 159) (237 084 1) simpleGrading (1 1 1)
    hex (064 065 074 073 151 152 161 160) (237 084 1) simpleGrading (1 1 1)
    hex (065 066 075 074 152 153 162 161) (004 084 1) simpleGrading (1 1 1)
    hex (066 067 076 075 153 154 163 162) (241 084 1) simpleGrading (1 1 1)
    hex (067 068 077 076 154 155 164 163) (068 084 1) simpleGrading (611.455   1.000 1)
    hex (069 070 079 078 156 157 166 165) (055 057 1) simpleGrading (  0.006 210.000 1)
    hex (070 071 080 079 157 158 167 166) (241 057 1) simpleGrading (  1.000 210.000 1)
    hex (071 072 081 080 158 159 168 167) (004 057 1) simpleGrading (  1.000 210.000 1)
    hex (072 073 082 081 159 160 169 168) (237 057 1) simpleGrading (  1.000 210.000 1)
    hex (073 074 083 082 160 161 170 169) (237 057 1) simpleGrading (  1.000 210.000 1)
    hex (074 075 084 083 161 162 171 170) (004 057 1) simpleGrading (  1.000 210.000 1)
    hex (075 076 085 084 162 163 172 171) (241 057 1) simpleGrading (  1.000 210.000 1)
    hex (076 077 086 085 163 164 173 172) (068 057 1) simpleGrading (611.455 210.000 1)
);

edges
(
);

boundary
(
    top
    {
        type symmetryPlane;
        faces
        (
            (165 166 79 78)
            (166 167 80 79)
            (167 168 81 80)
            (168 169 82 81)
            (169 170 83 82)
            (170 171 84 83)
            (171 172 85 84)
            (172 173 86 85)
        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (88 87 0 1)
            (89 88 1 2)
            (90 89 2 3)
            (91 90 3 4)
            (92 91 4 5)
            (93 92 5 6)
            (94 93 6 7)
            (95 94 7 8)
            (96 95 8 9)
            (97 96 9 10)
            (98 97 10 11)
            (99 98 11 12)
            (100 99 12 13)
            (101 100 13 14)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (87 102 15 0)
            (102 117 30 15)
            (117 132 45 30)
            (132 147 60 45)
            (147 156 69 60)
            (156 165 78 69)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (14 29 116 101)
            (29 44 131 116)
            (44 59 146 131)
            (59 68 155 146)
            (68 77 164 155)
            (77 86 173 164)
        );
    }
    deck
    {
        type wall;
        faces
        (
            (134 135 48 47)
            (135 136 49 48)
            (136 121 34 49)
            (121 122 35 34)
            (122 137 50 35)
            (137 138 51 50)
            (138 139 52 51)
            (139 140 53 52)
            (140 141 54 53)
            (141 126 39 54)
            (126 127 40 39)
            (127 142 55 40)
            (142 143 56 55)
            (143 144 57 56)
            (144 153 66 57)
            (153 152 65 66)
            (152 151 64 65)
            (151 150 63 64)
            (150 149 62 63)
            (149 134 47 62)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (15 16 1 0)
            (16 17 2 1)
            (17 18 3 2)
            (18 19 4 3)
            (19 20 5 4)
            (20 21 6 5)
            (21 22 7 6)
            (22 23 8 7)
            (23 24 9 8)
            (24 25 10 9)
            (25 26 11 10)
            (26 27 12 11)
            (27 28 13 12)
            (28 29 14 13)
            (30 31 16 15)
            (31 32 17 16)
            (32 33 18 17)
            (33 34 19 18)
            (34 35 20 19)
            (35 36 21 20)
            (36 37 22 21)
            (37 38 23 22)
            (38 39 24 23)
            (39 40 25 24)
            (40 41 26 25)
            (41 42 27 26)
            (42 43 28 27)
            (43 44 29 28)
            (45 46 31 30)
            (46 47 32 31)
            (47 48 33 32)
            (48 49 34 33)
            (50 51 36 35)
            (51 52 37 36)
            (52 53 38 37)
            (53 54 39 38)
            (55 56 41 40)
            (56 57 42 41)
            (57 58 43 42)
            (58 59 44 43)
            (60 61 46 45)
            (61 62 47 46)
            (66 67 58 57)
            (67 68 59 58)
            (69 70 61 60)
            (70 71 62 61)
            (71 72 63 62)
            (72 73 64 63)
            (73 74 65 64)
            (74 75 66 65)
            (75 76 67 66)
            (76 77 68 67)
            (78 79 70 69)
            (79 80 71 70)
            (80 81 72 71)
            (81 82 73 72)
            (82 83 74 73)
            (83 84 75 74)
            (84 85 76 75)
            (85 86 77 76)
            (87 88 103 102)
            (88 89 104 103)
            (89 90 105 104)
            (90 91 106 105)
            (91 92 107 106)
            (92 93 108 107)
            (93 94 109 108)
            (94 95 110 109)
            (95 96 111 110)
            (96 97 112 111)
            (97 98 113 112)
            (98 99 114 113)
            (99 100 115 114)
            (100 101 116 115)
            (102 103 118 117)
            (103 104 119 118)
            (104 105 120 119)
            (105 106 121 120)
            (106 107 122 121)
            (107 108 123 122)
            (108 109 124 123)
            (109 110 125 124)
            (110 111 126 125)
            (111 112 127 126)
            (112 113 128 127)
            (113 114 129 128)
            (114 115 130 129)
            (115 116 131 130)
            (117 118 133 132)
            (118 119 134 133)
            (119 120 135 134)
            (120 121 136 135)
            (122 123 138 137)
            (123 124 139 138)
            (124 125 140 139)
            (125 126 141 140)
            (127 128 143 142)
            (128 129 144 143)
            (129 130 145 144)
            (130 131 146 145)
            (132 133 148 147)
            (133 134 149 148)
            (144 145 154 153)
            (145 146 155 154)
            (147 148 157 156)
            (148 149 158 157)
            (149 150 159 158)
            (150 151 160 159)
            (151 152 161 160)
            (152 153 162 161)
            (153 154 163 162)
            (154 155 164 163)
            (156 157 166 165)
            (157 158 167 166)
            (158 159 168 167)
            (159 160 169 168)
            (160 161 170 169)
            (161 162 171 170)
            (162 163 172 171)
            (163 164 173 172)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
