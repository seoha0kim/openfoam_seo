/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(87);
        points[0] = point(-0.500000, -0.500000, 0.000000);
        points[1] = point(-0.302500, -0.500000, 0.000000);
        points[2] = point(-0.151250, -0.500000, 0.000000);
        points[3] = point(-0.120045, -0.500000, 0.000000);
        points[4] = point(-0.108125, -0.500000, 0.000000);
        points[5] = point(-0.089375, -0.500000, 0.000000);
        points[6] = point(-0.077391, -0.500000, 0.000000);
        points[7] = point(0.000000, -0.500000, 0.000000);
        points[8] = point(0.077391, -0.500000, 0.000000);
        points[9] = point(0.089375, -0.500000, 0.000000);
        points[10] = point(0.108125, -0.500000, 0.000000);
        points[11] = point(0.120045, -0.500000, 0.000000);
        points[12] = point(0.151250, -0.500000, 0.000000);
        points[13] = point(0.302500, -0.500000, 0.000000);
        points[14] = point(0.500000, -0.500000, 0.000000);
        points[15] = point(-0.500000, -0.062500, 0.000000);
        points[16] = point(-0.302500, -0.062500, 0.000000);
        points[17] = point(-0.151250, -0.062500, 0.000000);
        points[18] = point(-0.120045, -0.062500, 0.000000);
        points[19] = point(-0.108125, -0.062500, 0.000000);
        points[20] = point(-0.089375, -0.062500, 0.000000);
        points[21] = point(-0.077391, -0.062500, 0.000000);
        points[22] = point(0.000000, -0.062500, 0.000000);
        points[23] = point(0.077391, -0.062500, 0.000000);
        points[24] = point(0.089375, -0.062500, 0.000000);
        points[25] = point(0.108125, -0.062500, 0.000000);
        points[26] = point(0.120045, -0.062500, 0.000000);
        points[27] = point(0.151250, -0.062500, 0.000000);
        points[28] = point(0.302500, -0.062500, 0.000000);
        points[29] = point(0.500000, -0.062500, 0.000000);
        points[30] = point(-0.500000, -0.012500, 0.000000);
        points[31] = point(-0.302500, -0.012500, 0.000000);
        points[32] = point(-0.151250, -0.012500, 0.000000);
        points[33] = point(-0.120045, -0.012500, 0.000000);
        points[34] = point(-0.108125, -0.012500, 0.000000);
        points[35] = point(-0.089375, -0.012500, 0.000000);
        points[36] = point(-0.077391, -0.012500, 0.000000);
        points[37] = point(0.000000, -0.012500, 0.000000);
        points[38] = point(0.077391, -0.012500, 0.000000);
        points[39] = point(0.089375, -0.012500, 0.000000);
        points[40] = point(0.108125, -0.012500, 0.000000);
        points[41] = point(0.120045, -0.012500, 0.000000);
        points[42] = point(0.151250, -0.012500, 0.000000);
        points[43] = point(0.302500, -0.012500, 0.000000);
        points[44] = point(0.500000, -0.012500, 0.000000);
        points[45] = point(-0.500000, 0.006350, 0.000000);
        points[46] = point(-0.302500, 0.006350, 0.000000);
        points[47] = point(-0.151250, 0.006350, 0.000000);
        points[48] = point(-0.120045, 0.006974, 0.000000);
        points[49] = point(-0.110664, 0.005273, 0.000000);
        points[50] = point(-0.086766, 0.005765, 0.000000);
        points[51] = point(-0.077391, 0.007827, 0.000000);
        points[52] = point(0.000000, 0.009375, 0.000000);
        points[53] = point(0.077391, 0.007827, 0.000000);
        points[54] = point(0.086766, 0.005765, 0.000000);
        points[55] = point(0.110668, 0.005287, 0.000000);
        points[56] = point(0.120045, 0.006974, 0.000000);
        points[57] = point(0.151250, 0.006350, 0.000000);
        points[58] = point(0.302500, 0.006350, 0.000000);
        points[59] = point(0.500000, 0.006350, 0.000000);
        points[60] = point(-0.500000, 0.009525, 0.000000);
        points[61] = point(-0.302500, 0.009525, 0.000000);
        points[62] = point(-0.151250, 0.009525, 0.000000);
        points[63] = point(-0.148750, 0.009525, 0.000000);
        points[64] = point(0.000000, 0.012500, 0.000000);
        points[65] = point(0.148750, 0.009525, 0.000000);
        points[66] = point(0.151250, 0.009525, 0.000000);
        points[67] = point(0.302500, 0.009525, 0.000000);
        points[68] = point(0.500000, 0.009525, 0.000000);
        points[69] = point(-0.500000, 0.062500, 0.000000);
        points[70] = point(-0.302500, 0.062500, 0.000000);
        points[71] = point(-0.151250, 0.062500, 0.000000);
        points[72] = point(-0.148750, 0.062500, 0.000000);
        points[73] = point(0.000000, 0.062500, 0.000000);
        points[74] = point(0.148750, 0.062500, 0.000000);
        points[75] = point(0.151250, 0.062500, 0.000000);
        points[76] = point(0.302500, 0.062500, 0.000000);
        points[77] = point(0.500000, 0.062500, 0.000000);
        points[78] = point(-0.500000, 0.500000, 0.000000);
        points[79] = point(-0.302500, 0.500000, 0.000000);
        points[80] = point(-0.151250, 0.500000, 0.000000);
        points[81] = point(-0.148750, 0.500000, 0.000000);
        points[82] = point(0.000000, 0.500000, 0.000000);
        points[83] = point(0.148750, 0.500000, 0.000000);
        points[84] = point(0.151250, 0.500000, 0.000000);
        points[85] = point(0.302500, 0.500000, 0.000000);
        points[86] = point(0.500000, 0.500000, 0.000000);

        // Duplicate z points
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+sz] = point(pt.x(), pt.y(), 1);
        }

        os << points;
    #};
};

blocks
(
    hex (0 1 16 15 87 88 103 102) (78 174 1) simpleGrading (1 1 1)
    hex (1 2 17 16 88 89 104 103) (60 174 1) simpleGrading (1 1 1)
    hex (2 3 18 17 89 90 105 104) (12 174 1) simpleGrading (1 1 1)
    hex (3 4 19 18 90 91 106 105) (4 174 1) simpleGrading (1 1 1)
    hex (4 5 20 19 91 92 107 106) (7 174 1) simpleGrading (1 1 1)
    hex (5 6 21 20 92 93 108 107) (4 174 1) simpleGrading (1 1 1)
    hex (6 7 22 21 93 94 109 108) (30 174 1) simpleGrading (1 1 1)
    hex (7 8 23 22 94 95 110 109) (30 174 1) simpleGrading (1 1 1)
    hex (8 9 24 23 95 96 111 110) (4 174 1) simpleGrading (1 1 1)
    hex (9 10 25 24 96 97 112 111) (7 174 1) simpleGrading (1 1 1)
    hex (10 11 26 25 97 98 113 112) (4 174 1) simpleGrading (1 1 1)
    hex (11 12 27 26 98 99 114 113) (12 174 1) simpleGrading (1 1 1)
    hex (12 13 28 27 99 100 115 114) (60 174 1) simpleGrading (1 1 1)
    hex (13 14 29 28 100 101 116 115) (78 174 1) simpleGrading (1 1 1)
    hex (15 16 31 30 102 103 118 117) (78 19 1) simpleGrading (1 1 1)
    hex (16 17 32 31 103 104 119 118) (60 19 1) simpleGrading (1 1 1)
    hex (17 18 33 32 104 105 120 119) (12 19 1) simpleGrading (1 1 1)
    hex (18 19 34 33 105 106 121 120) (4 19 1) simpleGrading (1 1 1)
    hex (19 20 35 34 106 107 122 121) (7 19 1) simpleGrading (1 1 1)
    hex (20 21 36 35 107 108 123 122) (4 19 1) simpleGrading (1 1 1)
    hex (21 22 37 36 108 109 124 123) (30 19 1) simpleGrading (1 1 1)
    hex (22 23 38 37 109 110 125 124) (30 19 1) simpleGrading (1 1 1)
    hex (23 24 39 38 110 111 126 125) (4 19 1) simpleGrading (1 1 1)
    hex (24 25 40 39 111 112 127 126) (7 19 1) simpleGrading (1 1 1)
    hex (25 26 41 40 112 113 128 127) (4 19 1) simpleGrading (1 1 1)
    hex (26 27 42 41 113 114 129 128) (12 19 1) simpleGrading (1 1 1)
    hex (27 28 43 42 114 115 130 129) (60 19 1) simpleGrading (1 1 1)
    hex (28 29 44 43 115 116 131 130) (78 19 1) simpleGrading (1 1 1)
    hex (30 31 46 45 117 118 133 132) (78 7 1) simpleGrading (1 1 1)
    hex (31 32 47 46 118 119 134 133) (60 7 1) simpleGrading (1 1 1)
    hex (32 33 48 47 119 120 135 134) (12 7 1) simpleGrading (1 1 1)
    hex (33 34 49 48 120 121 136 135) (4 7 1) simpleGrading (1 1 1)
    hex (35 36 51 50 122 123 138 137) (4 7 1) simpleGrading (1 1 1)
    hex (36 37 52 51 123 124 139 138) (30 8 1) simpleGrading (1 1 1)
    hex (37 38 53 52 124 125 140 139) (30 8 1) simpleGrading (1 1 1)
    hex (38 39 54 53 125 126 141 140) (4 8 1) simpleGrading (1 1 1)
    hex (40 41 56 55 127 128 143 142) (4 7 1) simpleGrading (1 1 1)
    hex (41 42 57 56 128 129 144 143) (12 7 1) simpleGrading (1 1 1)
    hex (42 43 58 57 129 130 145 144) (60 7 1) simpleGrading (1 1 1)
    hex (43 44 59 58 130 131 146 145) (78 7 1) simpleGrading (1 1 1)
    hex (45 46 61 60 132 133 148 147) (78 1 1) simpleGrading (1 1 1)
    hex (46 47 62 61 133 134 149 148) (60 1 1) simpleGrading (1 1 1)
    hex (57 58 67 66 144 145 154 153) (60 1 1) simpleGrading (1 1 1)
    hex (58 59 68 67 145 146 155 154) (78 1 1) simpleGrading (1 1 1)
    hex (60 61 70 69 147 148 157 156) (78 21 1) simpleGrading (1 1 1)
    hex (61 62 71 70 148 149 158 157) (60 21 1) simpleGrading (1 1 1)
    hex (62 63 72 71 149 150 159 158) (1 21 1) simpleGrading (1 1 1)
    hex (63 64 73 72 150 151 160 159) (59 21 1) simpleGrading (1 1 1)
    hex (64 65 74 73 151 152 161 160) (59 19 1) simpleGrading (1 1 1)
    hex (65 66 75 74 152 153 162 161) (1 21 1) simpleGrading (1 1 1)
    hex (66 67 76 75 153 154 163 162) (60 21 1) simpleGrading (1 1 1)
    hex (67 68 77 76 154 155 164 163) (78 21 1) simpleGrading (1 1 1)
    hex (69 70 79 78 156 157 166 165) (78 174 1) simpleGrading (1 1 1)
    hex (70 71 80 79 157 158 167 166) (60 174 1) simpleGrading (1 1 1)
    hex (71 72 81 80 158 159 168 167) (1 174 1) simpleGrading (1 1 1)
    hex (72 73 82 81 159 160 169 168) (59 174 1) simpleGrading (1 1 1)
    hex (73 74 83 82 160 161 170 169) (59 174 1) simpleGrading (1 1 1)
    hex (74 75 84 83 161 162 171 170) (1 174 1) simpleGrading (1 1 1)
    hex (75 76 85 84 162 163 172 171) (60 174 1) simpleGrading (1 1 1)
    hex (76 77 86 85 163 164 173 172) (78 174 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    top
    {
        type symmetryPlane;
        faces
        (
            (165 166 79 78)
            (166 167 80 79)
            (167 168 81 80)
            (168 169 82 81)
            (169 170 83 82)
            (170 171 84 83)
            (171 172 85 84)
            (172 173 86 85)
        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (88 87 0 1)
            (89 88 1 2)
            (90 89 2 3)
            (91 90 3 4)
            (92 91 4 5)
            (93 92 5 6)
            (94 93 6 7)
            (95 94 7 8)
            (96 95 8 9)
            (97 96 9 10)
            (98 97 10 11)
            (99 98 11 12)
            (100 99 12 13)
            (101 100 13 14)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (87 102 15 0)
            (102 117 30 15)
            (117 132 45 30)
            (132 147 60 45)
            (147 156 69 60)
            (156 165 78 69)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (14 29 116 101)
            (29 44 131 116)
            (44 59 146 131)
            (59 68 155 146)
            (68 77 164 155)
            (77 86 173 164)
        );
    }
    deck
    {
        type symmetry;
        faces
        (
            (134 135 48 47)
            (135 136 49 48)
            (136 121 34 49)
            (121 122 35 34)
            (122 137 50 35)
            (137 138 51 50)
            (138 139 52 51)
            (139 140 53 52)
            (140 141 54 53)
            (141 126 39 54)
            (126 127 40 39)
            (127 142 55 40)
            (142 143 56 55)
            (143 144 57 56)
            (144 153 66 57)
            (153 152 65 66)
            (152 151 64 65)
            (151 150 63 64)
            (150 149 62 63)
            (149 134 47 62)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (15 16 1 0)
            (16 17 2 1)
            (17 18 3 2)
            (18 19 4 3)
            (19 20 5 4)
            (20 21 6 5)
            (21 22 7 6)
            (22 23 8 7)
            (23 24 9 8)
            (24 25 10 9)
            (25 26 11 10)
            (26 27 12 11)
            (27 28 13 12)
            (28 29 14 13)
            (30 31 16 15)
            (31 32 17 16)
            (32 33 18 17)
            (33 34 19 18)
            (34 35 20 19)
            (35 36 21 20)
            (36 37 22 21)
            (37 38 23 22)
            (38 39 24 23)
            (39 40 25 24)
            (40 41 26 25)
            (41 42 27 26)
            (42 43 28 27)
            (43 44 29 28)
            (45 46 31 30)
            (46 47 32 31)
            (47 48 33 32)
            (48 49 34 33)
            (50 51 36 35)
            (51 52 37 36)
            (52 53 38 37)
            (53 54 39 38)
            (55 56 41 40)
            (56 57 42 41)
            (57 58 43 42)
            (58 59 44 43)
            (60 61 46 45)
            (61 62 47 46)
            (66 67 58 57)
            (67 68 59 58)
            (69 70 61 60)
            (70 71 62 61)
            (71 72 63 62)
            (72 73 64 63)
            (73 74 65 64)
            (74 75 66 65)
            (75 76 67 66)
            (76 77 68 67)
            (78 79 70 69)
            (79 80 71 70)
            (80 81 72 71)
            (81 82 73 72)
            (82 83 74 73)
            (83 84 75 74)
            (84 85 76 75)
            (85 86 77 76)
            (87 88 103 102)
            (88 89 104 103)
            (89 90 105 104)
            (90 91 106 105)
            (91 92 107 106)
            (92 93 108 107)
            (93 94 109 108)
            (94 95 110 109)
            (95 96 111 110)
            (96 97 112 111)
            (97 98 113 112)
            (98 99 114 113)
            (99 100 115 114)
            (100 101 116 115)
            (102 103 118 117)
            (103 104 119 118)
            (104 105 120 119)
            (105 106 121 120)
            (106 107 122 121)
            (107 108 123 122)
            (108 109 124 123)
            (109 110 125 124)
            (110 111 126 125)
            (111 112 127 126)
            (112 113 128 127)
            (113 114 129 128)
            (114 115 130 129)
            (115 116 131 130)
            (117 118 133 132)
            (118 119 134 133)
            (119 120 135 134)
            (120 121 136 135)
            (122 123 138 137)
            (123 124 139 138)
            (124 125 140 139)
            (125 126 141 140)
            (127 128 143 142)
            (128 129 144 143)
            (129 130 145 144)
            (130 131 146 145)
            (132 133 148 147)
            (133 134 149 148)
            (144 145 154 153)
            (145 146 155 154)
            (147 148 157 156)
            (148 149 158 157)
            (149 150 159 158)
            (150 151 160 159)
            (151 152 161 160)
            (152 153 162 161)
            (153 154 163 162)
            (154 155 164 163)
            (156 157 166 165)
            (157 158 167 166)
            (158 159 168 167)
            (159 160 169 168)
            (160 161 170 169)
            (161 162 171 170)
            (162 163 172 171)
            (163 164 173 172)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
