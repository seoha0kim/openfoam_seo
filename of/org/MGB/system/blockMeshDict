/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(80);
        points[0] = point(-1.500000, -1.500000, -0.500000);
        points[1] = point(-0.400500, -1.500000, -0.500000);
        points[2] = point(-0.200064, -1.500000, -0.500000);
        points[3] = point(-0.193191, -1.500000, -0.500000);
        points[4] = point(-0.184553, -1.500000, -0.500000);
        points[5] = point(-0.110735, -1.500000, -0.500000);
        points[6] = point(-0.090110, -1.500000, -0.500000);
        points[7] = point(-0.043116, -1.500000, -0.500000);
        points[8] = point(0.043116, -1.500000, -0.500000);
        points[9] = point(0.090110, -1.500000, -0.500000);
        points[10] = point(0.110735, -1.500000, -0.500000);
        points[11] = point(0.184553, -1.500000, -0.500000);
        points[12] = point(0.193191, -1.500000, -0.500000);
        points[13] = point(0.200064, -1.500000, -0.500000);
        points[14] = point(0.801000, -1.500000, -0.500000);
        points[15] = point(4.500000, -1.500000, -0.500000);
        points[16] = point(-1.500000, -0.296208, -0.500000);
        points[17] = point(-0.429268, -0.252721, -0.500000);
        points[18] = point(-0.229930, -0.273672, -0.500000);
        points[19] = point(-0.223095, -0.274391, -0.500000);
        points[20] = point(-0.214504, -0.275294, -0.500000);
        points[21] = point(-0.141091, -0.283010, -0.500000);
        points[22] = point(-0.120579, -0.285166, -0.500000);
        points[23] = point(-0.073842, -0.290078, -0.500000);
        points[24] = point(0.011918, -0.299092, -0.500000);
        points[25] = point(0.058655, -0.304004, -0.500000);
        points[26] = point(0.079167, -0.306160, -0.500000);
        points[27] = point(0.152579, -0.313876, -0.500000);
        points[28] = point(0.161171, -0.314779, -0.500000);
        points[29] = point(0.168006, -0.315497, -0.500000);
        points[30] = point(0.765650, -0.378312, -0.500000);
        points[31] = point(4.500000, -0.296208, -0.500000);
        points[32] = point(-1.500000, 0.014011, -0.500000);
        points[33] = point(-0.396841, 0.055798, -0.500000);
        points[34] = point(-0.197503, 0.034847, -0.500000);
        points[35] = point(-0.190651, 0.034298, -0.500000);
        points[36] = point(-0.181579, 0.037959, -0.500000);
        points[37] = point(-0.107974, 0.032072, -0.500000);
        points[38] = point(-0.087801, 0.026697, -0.500000);
        points[39] = point(-0.045976, -0.024952, -0.500000);
        points[40] = point(0.039784, -0.033965, -0.500000);
        points[41] = point(0.091433, 0.007859, -0.500000);
        points[42] = point(0.112283, 0.008922, -0.500000);
        points[43] = point(0.185504, -0.000623, -0.500000);
        points[44] = point(0.193615, -0.006090, -0.500000);
        points[45] = point(0.200432, -0.006978, -0.500000);
        points[46] = point(0.798077, -0.069793, -0.500000);
        points[47] = point(4.500000, 0.014011, -0.500000);
        points[48] = point(-1.500000, 0.021508, -0.500000);
        points[49] = point(-0.396058, 0.063254, -0.500000);
        points[50] = point(-0.196905, 0.042322, -0.500000);
        points[51] = point(-0.004085, 0.026899, -0.500000);
        points[52] = point(0.009589, 0.025462, -0.500000);
        points[53] = point(0.201401, 0.000459, -0.500000);
        points[54] = point(0.798860, -0.062337, -0.500000);
        points[55] = point(4.500000, 0.021508, -0.500000);
        points[56] = point(-1.500000, 0.029621, -0.500000);
        points[57] = point(-0.395210, 0.071322, -0.500000);
        points[58] = point(-0.196057, 0.050390, -0.500000);
        points[59] = point(-0.003120, 0.030112, -0.500000);
        points[60] = point(0.009312, 0.028805, -0.500000);
        points[61] = point(0.202249, 0.008527, -0.500000);
        points[62] = point(0.799708, -0.054269, -0.500000);
        points[63] = point(4.500000, 0.029621, -0.500000);
        points[64] = point(-1.500000, 0.296208, -0.500000);
        points[65] = point(-0.367344, 0.336448, -0.500000);
        points[66] = point(-0.168191, 0.315517, -0.500000);
        points[67] = point(0.024746, 0.295238, -0.500000);
        points[68] = point(0.037178, 0.293932, -0.500000);
        points[69] = point(0.230115, 0.273653, -0.500000);
        points[70] = point(0.827574, 0.210858, -0.500000);
        points[71] = point(4.500000, 0.296208, -0.500000);
        points[72] = point(-1.500000, 1.500000, -0.500000);
        points[73] = point(-0.400500, 1.500000, -0.500000);
        points[74] = point(-0.200250, 1.500000, -0.500000);
        points[75] = point(-0.006250, 1.500000, -0.500000);
        points[76] = point(0.006250, 1.500000, -0.500000);
        points[77] = point(0.200250, 1.500000, -0.500000);
        points[78] = point(0.801000, 1.500000, -0.500000);
        points[79] = point(4.500000, 1.500000, -0.500000);

        // Duplicate z points
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+sz] = point(pt.x(), pt.y(), -pt.z());
        }

        os << points;
    #};
};

blocks
(
    hex (000 001 017 016 080 081 097 096) (036 037 1) edgeGrading (3.3e-02 3.4e-02 3.4e-02 3.3e-02 3.0e-02 2.8e-02 2.8e-02 3.0e-02 1 1 1 1)
    hex (001 002 018 017 081 082 098 097) (059 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 2.8e-02 2.9e-02 2.9e-02 2.8e-02 1 1 1 1)
    hex (002 003 019 018 082 083 099 098) (002 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 2.9e-02 2.9e-02 2.9e-02 2.9e-02 1 1 1 1)
    hex (003 004 020 019 083 084 100 099) (002 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 2.9e-02 2.9e-02 2.9e-02 2.9e-02 1 1 1 1)
    hex (004 005 021 020 084 085 101 100) (022 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 2.9e-02 2.9e-02 2.9e-02 2.9e-02 1 1 1 1)
    hex (005 006 022 021 085 086 102 101) (006 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 2.9e-02 2.9e-02 2.9e-02 2.9e-02 1 1 1 1)
    hex (006 007 023 022 086 087 103 102) (014 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 2.9e-02 3.0e-02 3.0e-02 2.9e-02 1 1 1 1)
    hex (007 008 024 023 087 088 104 103) (025 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.0e-02 3.0e-02 3.0e-02 3.0e-02 1 1 1 1)
    hex (008 009 025 024 088 089 105 104) (014 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.0e-02 3.0e-02 3.0e-02 3.0e-02 1 1 1 1)
    hex (009 010 026 025 089 090 106 105) (006 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.0e-02 3.0e-02 3.0e-02 3.0e-02 1 1 1 1)
    hex (010 011 027 026 090 091 107 106) (022 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.0e-02 3.0e-02 3.0e-02 3.0e-02 1 1 1 1)
    hex (011 012 028 027 091 092 108 107) (002 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.0e-02 3.0e-02 3.0e-02 3.0e-02 1 1 1 1)
    hex (012 013 029 028 092 093 109 108) (002 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.0e-02 3.0e-02 3.0e-02 3.0e-02 1 1 1 1)
    hex (013 014 030 029 093 094 110 109) (179 037 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.0e-02 3.3e-02 3.3e-02 3.0e-02 1 1 1 1)
    hex (014 015 031 030 094 095 111 110) (049 037 1) edgeGrading (1.0e+02 1.0e+02 1.0e+02 1.0e+02 3.3e-02 3.0e-02 3.0e-02 3.3e-02 1 1 1 1)
    hex (016 017 033 032 096 097 113 112) (036 092 1) edgeGrading (3.4e-02 3.2e-02 3.2e-02 3.4e-02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (017 018 034 033 097 098 114 113) (059 092 1) simpleGrading (1 1 1)
    hex (018 019 035 034 098 099 115 114) (002 092 1) simpleGrading (1 1 1)
    hex (019 020 036 035 099 100 116 115) (002 092 1) simpleGrading (1 1 1)
    hex (020 021 037 036 100 101 117 116) (022 092 1) simpleGrading (1 1 1)
    hex (021 022 038 037 101 102 118 117) (006 092 1) simpleGrading (1 1 1)
    hex (022 023 039 038 102 103 119 118) (014 092 1) simpleGrading (1 1 1)
    hex (023 024 040 039 103 104 120 119) (025 092 1) simpleGrading (1 1 1)
    hex (024 025 041 040 104 105 121 120) (014 092 1) simpleGrading (1 1 1)
    hex (025 026 042 041 105 106 122 121) (006 092 1) simpleGrading (1 1 1)
    hex (026 027 043 042 106 107 123 122) (022 092 1) simpleGrading (1 1 1)
    hex (027 028 044 043 107 108 124 123) (002 092 1) simpleGrading (1 1 1)
    hex (028 029 045 044 108 109 125 124) (002 092 1) simpleGrading (1 1 1)
    hex (029 030 046 045 109 110 126 125) (179 092 1) simpleGrading (1 1 1)
    hex (030 031 047 046 110 111 127 126) (049 092 1) edgeGrading (1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (032 033 049 048 112 113 129 128) (036 002 1) edgeGrading (3.2e-02 3.2e-02 3.2e-02 3.2e-02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (033 034 050 049 113 114 130 129) (059 002 1) simpleGrading (1 1 1)
    hex (045 046 054 053 125 126 134 133) (179 002 1) simpleGrading (1 1 1)
    hex (046 047 055 054 126 127 135 134) (049 002 1) edgeGrading (1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (048 049 057 056 128 129 137 136) (036 002 1) edgeGrading (3.2e-02 3.2e-02 3.2e-02 3.2e-02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (049 050 058 057 129 130 138 137) (059 002 1) simpleGrading (1 1 1)
    hex (050 051 059 058 130 131 139 138) (057 002 1) simpleGrading (1 1 1)
    hex (052 053 061 060 132 133 141 140) (057 002 1) simpleGrading (1 1 1)
    hex (053 054 062 061 133 134 142 141) (179 002 1) simpleGrading (1 1 1)
    hex (054 055 063 062 134 135 143 142) (049 002 1) edgeGrading (1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (056 057 065 064 136 137 145 144) (036 079 1) edgeGrading (3.2e-02 3.1e-02 3.1e-02 3.2e-02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (057 058 066 065 137 138 146 145) (059 079 1) simpleGrading (1 1 1)
    hex (058 059 067 066 138 139 147 146) (057 079 1) simpleGrading (1 1 1)
    hex (059 060 068 067 139 140 148 147) (003 079 1) simpleGrading (1 1 1)
    hex (060 061 069 068 140 141 149 148) (057 079 1) simpleGrading (1 1 1)
    hex (061 062 070 069 141 142 150 149) (179 079 1) simpleGrading (1 1 1)
    hex (062 063 071 070 142 143 151 150) (049 079 1) edgeGrading (1.0e+02 1.0e+02 1.0e+02 1.0e+02 1.0e+00 1.0e+00 1.0e+00 1.0e+00 1 1 1 1)
    hex (064 065 073 072 144 145 153 152) (036 038 1) edgeGrading (3.1e-02 3.3e-02 3.3e-02 3.1e-02 3.3e+01 3.1e+01 3.1e+01 3.3e+01 1 1 1 1)
    hex (065 066 074 073 145 146 154 153) (059 038 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.1e+01 3.2e+01 3.2e+01 3.1e+01 1 1 1 1)
    hex (066 067 075 074 146 147 155 154) (057 038 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.2e+01 3.3e+01 3.3e+01 3.2e+01 1 1 1 1)
    hex (067 068 076 075 147 148 156 155) (003 038 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.3e+01 3.3e+01 3.3e+01 3.3e+01 1 1 1 1)
    hex (068 069 077 076 148 149 157 156) (057 038 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.3e+01 3.4e+01 3.4e+01 3.3e+01 1 1 1 1)
    hex (069 070 078 077 149 150 158 157) (179 038 1) edgeGrading (1.0e+00 1.0e+00 1.0e+00 1.0e+00 3.4e+01 3.6e+01 3.6e+01 3.4e+01 1 1 1 1)
    hex (070 071 079 078 150 151 159 158) (049 038 1) edgeGrading (1.0e+02 1.0e+02 1.0e+02 1.0e+02 3.6e+01 3.3e+01 3.3e+01 3.6e+01 1 1 1 1)
);

edges
(
);

boundary
(
    top
    {
        type symmetryPlane;
        faces
        (
            (152 153 73 72)
            (153 154 74 73)
            (154 155 75 74)
            (155 156 76 75)
            (156 157 77 76)
            (157 158 78 77)
            (158 159 79 78)
        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (0 1 81 80)
            (1 2 82 81)
            (2 3 83 82)
            (3 4 84 83)
            (4 5 85 84)
            (5 6 86 85)
            (6 7 87 86)
            (7 8 88 87)
            (8 9 89 88)
            (9 10 90 89)
            (10 11 91 90)
            (11 12 92 91)
            (12 13 93 92)
            (13 14 94 93)
            (14 15 95 94)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (80 96 16 0)
            (96 112 32 16)
            (112 128 48 32)
            (128 136 56 48)
            (136 144 64 56)
            (144 152 72 64)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (15 31 111 95)
            (31 47 127 111)
            (47 55 135 127)
            (55 63 143 135)
            (63 71 151 143)
            (71 79 159 151)
        );
    }
    deck
    {
        type wall;
        faces
        (
            (34 35 115 114)
            (35 36 116 115)
            (36 37 117 116)
            (37 38 118 117)
            (38 39 119 118)
            (39 40 120 119)
            (40 41 121 120)
            (41 42 122 121)
            (42 43 123 122)
            (43 44 124 123)
            (44 45 125 124)
            (45 53 133 125)
            (53 52 132 133)
            (52 60 140 132)
            (60 59 139 140)
            (59 51 131 139)
            (51 50 130 131)
            (50 34 114 130)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (80 81 97 96)
            (81 82 98 97)
            (82 83 99 98)
            (83 84 100 99)
            (84 85 101 100)
            (85 86 102 101)
            (86 87 103 102)
            (87 88 104 103)
            (88 89 105 104)
            (89 90 106 105)
            (90 91 107 106)
            (91 92 108 107)
            (92 93 109 108)
            (93 94 110 109)
            (94 95 111 110)
            (96 97 113 112)
            (97 98 114 113)
            (98 99 115 114)
            (99 100 116 115)
            (100 101 117 116)
            (101 102 118 117)
            (102 103 119 118)
            (103 104 120 119)
            (104 105 121 120)
            (105 106 122 121)
            (106 107 123 122)
            (107 108 124 123)
            (108 109 125 124)
            (109 110 126 125)
            (110 111 127 126)
            (112 113 129 128)
            (113 114 130 129)
            (125 126 134 133)
            (126 127 135 134)
            (128 129 137 136)
            (129 130 138 137)
            (130 131 139 138)
            (132 133 141 140)
            (133 134 142 141)
            (134 135 143 142)
            (136 137 145 144)
            (137 138 146 145)
            (138 139 147 146)
            (139 140 148 147)
            (140 141 149 148)
            (141 142 150 149)
            (142 143 151 150)
            (144 145 153 152)
            (145 146 154 153)
            (146 147 155 154)
            (147 148 156 155)
            (148 149 157 156)
            (149 150 158 157)
            (150 151 159 158)
            (16 17 1 0)
            (17 18 2 1)
            (18 19 3 2)
            (19 20 4 3)
            (20 21 5 4)
            (21 22 6 5)
            (22 23 7 6)
            (23 24 8 7)
            (24 25 9 8)
            (25 26 10 9)
            (26 27 11 10)
            (27 28 12 11)
            (28 29 13 12)
            (29 30 14 13)
            (30 31 15 14)
            (32 33 17 16)
            (33 34 18 17)
            (34 35 19 18)
            (35 36 20 19)
            (36 37 21 20)
            (37 38 22 21)
            (38 39 23 22)
            (39 40 24 23)
            (40 41 25 24)
            (41 42 26 25)
            (42 43 27 26)
            (43 44 28 27)
            (44 45 29 28)
            (45 46 30 29)
            (46 47 31 30)
            (48 49 33 32)
            (49 50 34 33)
            (53 54 46 45)
            (54 55 47 46)
            (56 57 49 48)
            (57 58 50 49)
            (58 59 51 50)
            (60 61 53 52)
            (61 62 54 53)
            (62 63 55 54)
            (64 65 57 56)
            (65 66 58 57)
            (66 67 59 58)
            (67 68 60 59)
            (68 69 61 60)
            (69 70 62 61)
            (70 71 63 62)
            (72 73 65 64)
            (73 74 66 65)
            (74 75 67 66)
            (75 76 68 67)
            (76 77 69 68)
            (77 78 70 69)
            (78 79 71 70)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
