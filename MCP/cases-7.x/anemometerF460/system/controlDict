/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Description of the different keywords are given in the User Guide

application     pimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         10.0;

deltaT          1e-06;

writeControl    adjustableRunTime;

writeInterval   0.0001;

purgeWrite      0;

writeFormat     ascii;

writePrecision  7;

writeCompression true;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           0.8;

maxDeltaT       0.001;


//- Include libraries in order to get access
//  Run time loadable | not linked in the solver itself - powerful option
libs
(
    //- Include the solverFunctionObjects to get access to build passive
    //  scalar equations on the fly
    "libsolverFunctionObjects.so"
);

//- Build own functions
functions
{
    /*S
    {
        //- Here we build an new transport equations such as:
        //  ddt(rho, S) + div(phi,S) + laplacian(D,S) == Q 
        //  The source term Q can be modelled with the fvOptions
        //  functionality. Attention to the units you specify.

        type            scalarTransport;
        writeInterval   outputTime;
        active          false;

        //- Field name 
        field           S;

        //- Schemes used -> system/fvSchemes
        schemesField    S;

        //- Either use auto schemes or manuell added schemes
        autoSchemes     false;

        //- Corrections
        nCorr           0;

        //- Restart on start-up
        resetOnStartUp  false;

        //- Build a source term Q at different points (in this case)
        //  Highly flexible
        fvOptions
        {
            source
            {
                type            scalarSemiImplicitSource;
                active          true;

                scalarSemiImplicitSourceCoeffs
                {
                    //- Different selection modes possible such as points or
                    //  cellZones etc.
                    selectionMode   points;
                    points
                    4( 
                        (-0.6  0.15 0.0025)
                        (-0.6  0.13 0.0025)

                        (-0.6 -0.21 0.0025)
                        (-0.6 -0.23 0.0025)
                    );

                    //- Take care of the specific vs absolute value
                    volumeMode      specific;
                    injectionRateSuSp
                    {
                        //- Value 2 starting at time t = 0
                        S (2 0);
                    }
                }
            }
        };
    }
    */

    //- Additionally, include the residual functionallity. This will save
    //  the residuals into a file on the fly. Can be monitored using gnuplot
    #includeFunc residuals
}

// ************************************************************************* //
